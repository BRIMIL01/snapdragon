<link rel="stylesheet" type="text/css" href="/jasmine-core/jasmine.css">
<script type="text/javascript" src="/jasmine-core/jasmine.js"></script>
<script type="text/javascript" src="/jasmine-core/jasmine-html.js"></script>

<script type="text/javascript" src="/resources/ConsoleReporter.js"></script>

<script type="text/javascript" src="/jasmine-core/boot.js"></script>

<script type="text/javascript">
  // <![CDATA[

  // standard jasmine code to add console reporter in runner code goes here
  var env = jasmine.getEnv();
  var consoleReporterFunc = getJasmineRequireObj().ConsoleReporter();
  var consoleReporter = new consoleReporterFunc({});
  env.addReporter(consoleReporter);

  // ]]>
</script>

<script type="text/javascript">
  // The implementation code the spec files being tested need

  // <![CDATA[
      <% if @spec_path %>
        <%# <%= render_spec(@spec_path) %>
      <% end %>
  // File.read of the spec file


  // This is just some test implementation code to test that everything would
  // work assuming that I can find a way to get the implementation code
  // loaded in here like this.
  var Hoopty = function() {
    this.hello = function() {
      return "Hello There";
    }
  };

  // ]]>
</script>

<script type="text/javascript">
  // The spec file contents

  // <![CDATA[

  // This is just some example Jasmine spec code to test that everything would
  // work assuming that I can find a way to get the spec code loaded in here
  // like this.
  describe("Hoopty", function() {
    it("exists", function() {
      var f = new Hoopty();
      expect(f).not.toBe(undefined);
    });

    describe(".hello", function() {
      it("says hello there", function() {
        var f = new Hoopty();
        expect(f.hello()).toBe("Hello There");
      });
    });
  });

  // ]]>
</script>

